using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DBWizard.Queries
{
    /// <summary>
    /// Represents the result of an executed database query.
    /// </summary>
    public class CDataBaseQueryResult
    {
        /// <summary>
        /// An exception that was produced by running the query, or null if no exception was produced. Use DumpException() to retrieve detailed information easily.
        /// </summary>
        public MySqlException m_p_exception { get; private set; }

        /// <summary>
        /// The number of rows that were affected by the query.
        /// </summary>
        public Int32 m_rows_affected { get; private set; }

        /// <summary>
        /// The result set generated by the query.
        /// </summary>
        public CDataBaseResultSet m_p_result_set { get; private set; }

        /// <summary>
        /// The query that produced this result.
        /// </summary>
        public CDataBaseQuery m_p_query { get; private set; }

        /// <summary>
        /// The last inserted id, or null if not available.
        /// </summary>
        public Nullable<Int64> m_last_inserted_id { get; private set; }

        public CDataBaseQueryResult(CDataBaseQuery p_query, Int32 rows_affected, Int64 last_inserted_id)
        {
            m_rows_affected = rows_affected;
            m_last_inserted_id = last_inserted_id;
            m_p_exception = null;

            m_p_query = p_query;

            m_p_result_set = new CDataBaseResultSet();
        }
        public CDataBaseQueryResult(CDataBaseQuery p_query, Int32 rows_affected)
        {
            m_rows_affected = rows_affected;
            m_p_exception = null;

            m_p_query = p_query;

            m_p_result_set = new CDataBaseResultSet();
        }
        public CDataBaseQueryResult(CDataBaseQuery p_query)
            : this(p_query, 0)
        {
        }

        public CDataBaseQueryResult(CDataBaseQuery p_query, MySqlException p_exception)
        {
            m_p_query = p_query;
            m_p_exception = p_exception;
        }

        public void RetrieveFromReader(DbDataReader p_reader)
        {
            try
            {
                m_rows_affected = p_reader.RecordsAffected;

                m_p_result_set = new CDataBaseResultSet();
                while (p_reader.Read())
                {
                    List<Type> p_types = new List<Type>();
                    CDataBaseRow p_current_row = new CDataBaseRow();
                    for (Int32 i = 0; i < p_reader.FieldCount; ++i)
                    {
                        p_types.Add(p_reader.GetFieldType(i));
                        p_current_row.Set(p_reader.GetName(i), p_reader.GetValue(i));
                    }
                    m_p_result_set.AddRow(p_current_row);
                }
            }
            catch (MySqlException p_except)
            {
                m_p_exception = p_except;
            }
        }
        public async Task RetrieveFromReaderAsync(DbDataReader p_reader)
        {
            try
            {
                m_rows_affected = p_reader.RecordsAffected;

                m_p_result_set = new CDataBaseResultSet();
                while (await p_reader.ReadAsync())
                {
                    List<Type> p_types = new List<Type>();
                    CDataBaseRow p_current_row = new CDataBaseRow();
                    for (Int32 i = 0; i < p_reader.FieldCount; ++i)
                    {
                        p_types.Add(p_reader.GetFieldType(i));
                        p_current_row.Set(p_reader.GetName(i), p_reader.GetValue(i));
                    }
                    m_p_result_set.AddRow(p_current_row);
                }
            }
            catch (MySqlException p_except)
            {
                m_p_exception = p_except;
            }
        }
    }
}
